import type {
  mattermost$Locale,
  mattermost$User,
  mattermost$UserPatch,
  mattermost$UserAutocomplete,
  mattermost$UserSearch,
  mattermost$UserStatus,
  mattermost$Session,
  mattermost$Audit,
  mattermost$MfaSecret,
} from './mattermost.js.flow';

declare type mattermost$ResponseStatus = {
  status: 'OK' | 'FAIL' | 'REMOVE';
};

declare type mattermost$ResponseError = {
  status_code: number,
  id: string,
  message: string,
  request_id: string
};

declare module 'mattermost-redux/client' {
  declare class Client4 {
    // Properties
    setUserAgent(userAgent: string): void;

    getToken(): string;
    setToken(token: string): string;

    setAcceptLanguage(locale: mattermost$Locale): void;

    setEnableLogging(enable: boolean): void;

    setIncludeCookies(include: boolean): void;

    setUserId(userId: string): void;

    getServerVersion(): string;

    // URIs
    getUrl(): string;
    setUrl(url: string): void;

    getUrlVersion(): string;

    getBaseRoute(): string;

    getUsersRoute(): string;
    getUserRoute(userId: string): string;

    getTeamsRoute(): string;
    getTeamRoute(teamId: string): string;
    getTeamNameRoute(teamName: string): string;
    getTeamMembersRoute(teamId: string): string;
    getTeamMemberRoute(teamId: string, userId: string): string;

    getChannelsRoute(): string;
    getChannelRoute(channelId: string): string;
    getChannelMembersRoute(channelId: string): string;
    getChannelMemberRoute(channelId: string, userId: string): string;

    getPostsRoute(): string;
    getPostRoute(postId: string): string;

    getReactionsRoute(): string;

    getCommandsRoute(): string;

    getFilesRoute(): string;
    getFileRoute(fileId: string): string;

    getPreferencesRoute(userId: string): string;

    getIncomingHooksRoute(): string;
    getIncomingHookRoute(hookId: string): string;

    getOutgoingHooksRoute(): string;
    getOutgoingHookRoute(hookId: string): string;

    getOAuthRoute(): string;
    getOAuthAppsRoute(): string;
    getOAuthAppRoute(appId: string): string;

    getEmojisRoute(): string;
    getEmojiRoute(emojiId: string): string;

    getBrandRoute(): string;
    getBrandImageUrl(timestamp: number): string;
    getJobsRoute(): string;
    
    getPluginsRoute(): string;
    getPluginRoute(pluginId: string): string;

    // User Routes
    getMe(): Promise<mattermost$User>;
    patchMe(user: mattermost$UserPatch): Promise<mattermost$User>;
    getUser(userId: string): Promise<mattermost$User>;
    getUserByUsername(username: string): Promise<mattermost$User>;
    getUserByEmail(email: string): Promise<mattermost$User>;
    createUser(user: mattermost$User): Promise<mattermost$User>;
    updateUser(user: mattermost$UserPatch & {id: string}): Promise<mattermost$User>;

    login(loginId: string, password: string, token?: string, deviceId?: string, ldapOnly?: boolean): Promise<mattermost$User>;
    logout(): Promise<Response>;
   
    getProfiles(page?: number, perPage?: number): Promise<mattermost$User[]>;
    getProfilesByIds(userIds: string[]): Promise<mattermost$User[]>;
    getProfilesByUsernames(usernames: string[]): Promise<mattermost$User[]>;
    getProfilesInTeam(teamId: string, page?: number, perPage?: number, sort?: string): Promise<mattermost$User[]>;
    getProfilesNotInTeam(teamId: string, page?: number, perPage?: number): Promise<mattermost$User[]>;
    getProfilesWithoutTeam(page?: number, perPage?: number): Promise<mattermost$User[]>;
    getProfilesInChannel(channelId: string, page?: number, perPage?: number): Promise<mattermost$User[]>;
    getProfilesNotInChannel(teamId: string, channelId: string, page?: number, perPage?: number): Promise<mattermost$User[]>;
    searchUsers(term: string, options?: mattermost$UserSearch): Promise<mattermost$User[]>;
    autocompleteUsers(name: string, teamId: string, channelId: string): Promise<mattermost$UserAutocomplete>;

    updateUserRoles(userId: string, roles: string): Promise<mattermost$ResponseStatus>;
    updateUserMfa(userId: string, activate: boolean, code?: string): Promise<mattermost$ResponseStatus>;

    getProfilePictureUrl(userId: string, lastPictureUpdate: number): string;

    getSessions(userId: string): Promise<mattermost$Session[]>;
    getCurrentSession(userId: string, token: string): Promise<mattermost$Session>;
    revokeSession(userId: string, sessionId: string): Promise<mattermost$ResponseStatus>;
    attachDevice(deviceId: string): Promise<mattermost$ResponseStatus>;

    getUserAudits(userId: string, page?: number, perPage?: number): Promise<mattermost$Audit[]>;

    checkUserMfa(loginId: string): Promise<{ mfa_required: boolean }>;
    generateMfaSecret(userId: string): Promise<mattermost$MfaSecret>;

    getStatusesByIds(userIds: string[]): Promise<mattermost$UserStatus[]>;
    getStatus(userId: string): Promise<mattermost$UserStatus>;
    updateStatus(status: mattermost$UserStatus): Promise<mattermost$UserStatus>;
  }
};