// @flow
/* eslint no-undef: "off" */

declare type mattermost$Entity = {
  +id?: string,
  +create_at?: number,
  +update_at?: number,
};

declare type mattermost$PermanentEntity = mattermost$Entity & {
  +delete_at?: number
};

declare type mattermost$Channel = mattermost$PermanentEntity & {
  team_id?: string,
  type?: 'O' | 'P' | 'D' | 'G',
  display_name?: string,
  name?: string,
  header?: string,
  purpose?: string,
  last_post_at?: number,
  total_msg_count?: number,
  extra_update_at?: number,
  creator_id?: string
};

declare type mattermost$ChannelPatch = {
  display_name?: string,
  name?: string,
  header?: string,
  purpose?: string
};

declare type mattermost$ChannelMember = {
  channel_id: string,
  user_id: string,
  roles: string,
  last_viewed_at: number,
  msg_count: number,
  mention_count: number,
  notify_props: mattermost$ChannelMember$NotifyProps,
  last_update_at: number
};

declare type mattermost$ChannelMember$NotifyProps = {
  desktop?: 'default' | 'all' | 'mention' | 'none',
  email?: 'default' | 'all' | 'mention' | 'none',
  mark_unread?: 'all' | 'mention',
  push?: 'default' | 'all' | 'mention' | 'none'
};

declare type mattermost$ChannelStats = {
  channel_id: string,
  member_count: number
};

declare type mattermost$SlackAttachment$Field = {
  title: string,
  value: string,
  short: boolean
};

declare type mattermost$SlackAttachment = {
  id?: number,
  fallback?: string,
  color?: string,
  pretext?: string,
  author_name?: string,
  author_icon?: string,
  title?: string,
  title_link?: string,
  text?: string,
  fields?: mattermost$SlackAttachment$Field[],
  image_url?: string,
  thumb_url?: string,
  footer?: string,
  footer_icon?: string,
  ts?: ?number
};

declare type mattermost$Post$Props = {
  attachments?: mattermost$SlackAttachment[],
  from_webhook?: 'true' | 'false',
  override_icon_url?: string
}

declare type mattermost$Post = mattermost$PermanentEntity & {
  is_pinned?: boolean,
  user_id?: string,
  channel_id?: string,
  root_id?: string,
  parent_id?: string,
  original_id?: string,
  message?: string,
  type?: ''
    | 'slack_attachment'
    | 'system_generic'
    // | 'system_join_leave' // Deprecated
    | 'system_join_channel'
    | 'system_leave_channel'
    // | 'system_add_remove' // Deprecated
    | 'system_add_to_channel'
    | 'system_remove_from_channel'
    | 'system_header_change'
    | 'system_displayname_change'
    | 'system_purpose_change'
    | 'system_channel_deleted'
    | 'system_ephemeral',
  props?: mattermost$Post$Props,
  hashtags?: string,
  file_ids?: string[],
  pending_post_id?: string,
  has_reactions?: boolean
};

declare type mattermost$PostPatch = {
  is_pinned?: boolean,
  message?: string,
  props?: mattermost$Post$Props,
  file_ids?: string[],
  has_reactions?: boolean
};

declare type mattermost$PostList = {
  order: string[],
  posts: {
    [postId: string]: mattermost$Post
  }
};

declare type mattermost$Session = {
  id: string,
  token: string,
  create_at: number,
  expires_at: number,
  last_activity_at: number,
  user_id: string,
  device_id: string,
  roles: string,
  is_oauth: boolean,
  props: mattermost$Session$Props,
  team_members: mattermost$TeamMember[]
};

declare type mattermost$Session$Props = {
  browser: string,
  os: string,
  platform: string
};

declare type mattermost$Audit = {
  id: string,
  create_at: number,
  user_id: string,
  action: string,
  extra_info: string,
  ip_address: string,
  session_id: string
};

declare type mattermost$MfaSecret = {
  secret: string,
  qr_code: string
};

declare type mattermost$UserAccessToken = {
  id?: string,
  token?: string,
  user_id?: string,
  description?: string
};

declare type mattermost$FileInfo = {
  id: string,
  user_id: string,
  post_id: string,
  create_at: number,
  update_at: number,
  delete_at: number,
  name: string,
  extension: string,
  size: number,
  mime_type: string,
  width: number,
  height: number,
  has_preview_image: boolean
};

declare type mattermost$Reaction = {
  user_id: string,
  post_id: string,
  emoji_name: string,
  create_at: number
};

declare type mattermost$Preference = { user_id: string } & {
  category: 'notifications',
  name: 'email_interval',
  value: '0' | '30' | '900' | '3600' // zero means 'never', thirty means 'immediately'
} | {
  category: 'direct_channel_show' | 'group_channel_show',
  name: string, // channel's id
  value: 'true' | 'false'
} | {
  category: 'tutorial_step',
  name: string, // user's id
  value: string // numberic
} | {
  category: 'advanced_settings',
  name: 
    | 'feature_enabled_embed_preview' 
    | 'feature_enabled_emojipicker' 
    | 'feature_enabled_markdown_preview' 
    | 'feature_enabled_webrtc_preview' 
    | 'formatting' ,
  value: 'true' | 'false'
} | {
  category: 'flagged_post',
  name: string, // post's id
  value: 'true' | 'false'
} | {
  category: 'favorite_channel',
  name: string, // channel's id
  value: 'true' | 'false'
} | {
  category: 'display_settings',
  name: 'collapse_previews' | 'use_military_time',
  value: 'true' | 'false' 
} | {
  category: 'display_settings',
  name: 'channel_display_mode',
  value: 'full' | 'centered'
} | {
  category: 'display_settings',
  name: 'message_display',
  value: 'clean' | 'compact'
} | {
  category: 'display_settings',
  name: 'name_format',
  value: 'full_name'
} | {
  category: 'display_settings',
  name: 'selected_font',
  value: string // font name
} | {
  category: 'last',
  name: 'team' | 'channel',
  value: string // last team's id or last channel's id
} | {
  category: 'theme',
  name: '',
  value: string
};

declare type mattermost$WebrtcInfo = {
	token: string,
	gateway_url: string,
	stun_uri?: string,
	turn_uri?: string,
	turn_password?: string,
	turn_username?: string
};

declare type mattermost$IncomingWebhook = mattermost$PermanentEntity & {
  user_id?: string,
  channel_id: string,
  team_id?: string,
  display_name: string,
  description: string,
};

declare type mattermost$IncomingWebhookRequest = {
  text?: string,
  username?: string,
  icon_url?: string,
  channel?: string,
  props?: {},
  attachments?: mattermost$SlackAttachment[],
  type?: string
};

declare type mattermost$OutgoingWebhook = mattermost$PermanentEntity & {
  token?: string,
  creator_id?: string,
  channel_id?: string,
  team_id: string,
  trigger_words?: string[],
  trigger_when: 0 | 1,
  callback_urls: string[],
  display_name: string,
  description: string,
  content_type: 'application/x-www-form-urlencoded' | 'application/json'
};

declare type mattermost$OutgoingWebhookPayload = {
  token: string,
  team_id: string,
  team_domain: string,
  channel_id: string,
  channel_name: string,
  timestamp: number,
  user_id: string,
  user_name: string,
  post_id: string,
  text: string,
  trigger_word: string,
};

declare type mattermost$Command = mattermost$PermanentEntity & {
  token?: string,
  creator_id?: string,
  team_id: string,
  trigger: string,
  method: 'P' | 'G', 
  username?: string,
  icon_url?: string,
  auto_complete?: boolean,
  auto_complete_desc?: string,
  auto_complete_hint?: string,
  display_name: string,
  description: string,
  url: string
};

declare type mattermost$CommandArgs = {
  user_id?: string,
  channel_id: string,
  team_id?: string,
  root_id?: string,
  parent_id?: string,
};

declare type mattermost$CommandResponse = {
  response_type: 'in_channel' | 'ephemeral',
  text: string,
  username: string,
  icon_url: string,
  goto_location: string,
  attachments: mattermost$SlackAttachment[]
};

declare type mattermost$OAuthApp = mattermost$Entity & {
  creator_id?: string,
  client_secret?: string,
  name: string,
  description: string,
  icon_url?: string,
  callback_urls: string[],
  homepage: string,
  is_trusted: boolean,
};

declare type mattermost$Emoji = mattermost$PermanentEntity & {
  creator_id?: string,
  name: string
};

declare type mattermost$Job = {
  +id?: string,
  type: 
    | 'data_retention'
    | 'elasticsearch_post_indexing'
    | 'elasticsearch_post_aggregation'
    | 'ldap_sync',
  priority?: number,
  create_at?: number,
  start_at?: number,
  last_activity_at?: number,
  status?: 'pending' | 'in_progress' | 'success' | 'error' | 'cancel_requested' | 'canceled',
  progress?: number,
  data: {}
};

declare type mattermost$ResponseError = {
  +status_code: number,
  +id: string,
  +message: string,
  +request_id: string
};